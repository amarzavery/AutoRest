/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

var internalMappers: any = {};

internalMappers.ErrorModel = {
  required: false,
  serializedName: 'Error',
  type: {
    name: 'Composite',
    className: 'ErrorModel',
    modelProperties: {
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'Number'
        }
      },
      message: {
        required: false,
        serializedName: 'message',
        type: {
          name: 'String'
        }
      },
      parentError: {
        required: false,
        serializedName: 'parentError',
        type: {
          name: 'Composite',
          className: 'ErrorModel'
        }
      }
    }
  }
};

internalMappers.Resource = {
  required: false,
  serializedName: 'Resource',
  type: {
    name: 'Composite',
    className: 'Resource',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      location: {
        required: false,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.FlattenedProduct = {
  required: false,
  serializedName: 'FlattenedProduct',
  type: {
    name: 'Composite',
    className: 'FlattenedProduct',
    modelProperties: {
      id: {
        required: false,
        readOnly: true,
        serializedName: 'id',
        type: {
          name: 'String'
        }
      },
      type: {
        required: false,
        readOnly: true,
        serializedName: 'type',
        type: {
          name: 'String'
        }
      },
      tags: {
        required: false,
        serializedName: 'tags',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'stringElementType',
              type: {
                name: 'String'
              }
          }
        }
      },
      location: {
        required: false,
        serializedName: 'location',
        type: {
          name: 'String'
        }
      },
      name: {
        required: false,
        readOnly: true,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      },
      pname: {
        required: false,
        serializedName: 'properties.p\\.name',
        type: {
          name: 'String'
        }
      },
      flattenedProductType: {
        required: false,
        serializedName: 'properties.type',
        type: {
          name: 'String'
        }
      },
      provisioningStateValues: {
        required: false,
        readOnly: true,
        serializedName: 'properties.provisioningStateValues',
        type: {
          name: 'String'
        }
      },
      provisioningState: {
        required: false,
        serializedName: 'properties.provisioningState',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.ResourceCollection = {
  required: false,
  serializedName: 'ResourceCollection',
  type: {
    name: 'Composite',
    className: 'ResourceCollection',
    modelProperties: {
      productresource: {
        required: false,
        serializedName: 'productresource',
        type: {
          name: 'Composite',
          className: 'FlattenedProduct'
        }
      },
      arrayofresources: {
        required: false,
        serializedName: 'arrayofresources',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'FlattenedProductElementType',
              type: {
                name: 'Composite',
                className: 'FlattenedProduct'
              }
          }
        }
      },
      dictionaryofresources: {
        required: false,
        serializedName: 'dictionaryofresources',
        type: {
          name: 'Dictionary',
          value: {
              required: false,
              serializedName: 'FlattenedProductElementType',
              type: {
                name: 'Composite',
                className: 'FlattenedProduct'
              }
          }
        }
      }
    }
  }
};

internalMappers.BaseProduct = {
  required: false,
  serializedName: 'BaseProduct',
  type: {
    name: 'Composite',
    className: 'BaseProduct',
    modelProperties: {
      productId: {
        required: true,
        serializedName: 'base_product_id',
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'base_product_description',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.SimpleProduct = {
  required: false,
  serializedName: 'SimpleProduct',
  type: {
    name: 'Composite',
    className: 'SimpleProduct',
    modelProperties: {
      productId: {
        required: true,
        serializedName: 'base_product_id',
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        serializedName: 'base_product_description',
        type: {
          name: 'String'
        }
      },
      maxProductDisplayName: {
        required: true,
        serializedName: 'details.max_product_display_name',
        type: {
          name: 'String'
        }
      },
      capacity: {
        required: true,
        isConstant: true,
        serializedName: 'details.max_product_capacity',
        defaultValue: 'Large',
        type: {
          name: 'String'
        }
      },
      genericValue: {
        required: false,
        serializedName: 'details.max_product_image.generic_value',
        type: {
          name: 'String'
        }
      },
      odatavalue: {
        required: false,
        serializedName: 'details.max_product_image.@odata\\.value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.GenericUrl = {
  required: false,
  serializedName: 'GenericUrl',
  type: {
    name: 'Composite',
    className: 'GenericUrl',
    modelProperties: {
      genericValue: {
        required: false,
        serializedName: 'generic_value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.WrappedProduct = {
  required: false,
  serializedName: 'WrappedProduct',
  type: {
    name: 'Composite',
    className: 'WrappedProduct',
    modelProperties: {
      value: {
        required: false,
        serializedName: 'value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.ProductWrapper = {
  required: false,
  serializedName: 'ProductWrapper',
  type: {
    name: 'Composite',
    className: 'ProductWrapper',
    modelProperties: {
      value: {
        required: false,
        serializedName: 'property.value',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.FlattenParameterGroup = {
  required: false,
  type: {
    name: 'Composite',
    className: 'FlattenParameterGroup',
    modelProperties: {
      name: {
        required: true,
        type: {
          name: 'String'
        }
      },
      productId: {
        required: true,
        type: {
          name: 'String'
        }
      },
      description: {
        required: false,
        type: {
          name: 'String'
        }
      },
      maxProductDisplayName: {
        required: true,
        type: {
          name: 'String'
        }
      },
      genericValue: {
        required: false,
        type: {
          name: 'String'
        }
      },
      odatavalue: {
        required: false,
        type: {
          name: 'String'
        }
      }
    }
  }
};
export const Mappers = internalMappers;
