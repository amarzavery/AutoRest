/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

var internalMappers: any = {};

internalMappers.ProductProperties = {
  required: false,
  serializedName: 'Product_properties',
  type: {
    name: 'Composite',
    className: 'ProductProperties',
    modelProperties: {
      id: {
        required: false,
        serializedName: 'id',
        type: {
          name: 'Number'
        }
      },
      name: {
        required: false,
        serializedName: 'name',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.Product = {
  required: false,
  serializedName: 'Product',
  type: {
    name: 'Composite',
    className: 'Product',
    modelProperties: {
      properties: {
        required: false,
        serializedName: 'properties',
        type: {
          name: 'Composite',
          className: 'ProductProperties'
        }
      }
    }
  }
};

internalMappers.OperationResult = {
  required: false,
  serializedName: 'OperationResult',
  type: {
    name: 'Composite',
    className: 'OperationResult',
    modelProperties: {
      status: {
        required: false,
        serializedName: 'status',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.PagingGetMultiplePagesOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PagingGetMultiplePagesOptions',
    modelProperties: {
      maxresults: {
        required: false,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      }
    }
  }
};

internalMappers.PagingGetOdataMultiplePagesOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PagingGetOdataMultiplePagesOptions',
    modelProperties: {
      maxresults: {
        required: false,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      }
    }
  }
};

internalMappers.PagingGetMultiplePagesWithOffsetOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PagingGetMultiplePagesWithOffsetOptions',
    modelProperties: {
      maxresults: {
        required: false,
        type: {
          name: 'Number'
        }
      },
      offset: {
        required: true,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      }
    }
  }
};

internalMappers.CustomParameterGroup = {
  required: false,
  type: {
    name: 'Composite',
    className: 'CustomParameterGroup',
    modelProperties: {
      apiVersion: {
        required: true,
        type: {
          name: 'String'
        }
      },
      tenant: {
        required: true,
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.PagingGetMultiplePagesWithOffsetNextOptions = {
  required: false,
  type: {
    name: 'Composite',
    className: 'PagingGetMultiplePagesWithOffsetNextOptions',
    modelProperties: {
      maxresults: {
        required: false,
        type: {
          name: 'Number'
        }
      },
      timeout: {
        required: false,
        defaultValue: 30,
        type: {
          name: 'Number'
        }
      }
    }
  }
};

internalMappers.ProductResult = {
  required: false,
  serializedName: 'ProductResult',
  type: {
    name: 'Composite',
    className: 'ProductResult',
    modelProperties: {
      values: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProductElementType',
              type: {
                name: 'Composite',
                className: 'Product'
              }
          }
        }
      },
      nextLink: {
        required: false,
        serializedName: 'nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

internalMappers.OdataProductResult = {
  required: false,
  serializedName: 'OdataProductResult',
  type: {
    name: 'Composite',
    className: 'OdataProductResult',
    modelProperties: {
      values: {
        required: false,
        serializedName: '',
        type: {
          name: 'Sequence',
          element: {
              required: false,
              serializedName: 'ProductElementType',
              type: {
                name: 'Composite',
                className: 'Product'
              }
          }
        }
      },
      odatanextLink: {
        required: false,
        serializedName: 'odata\\.nextLink',
        type: {
          name: 'String'
        }
      }
    }
  }
};

export const Mappers = internalMappers;
